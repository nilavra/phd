[["index.html", "Welcome Abstract Acknowledgments", " LongSAL: A Longitudinal Study to Understand University Students’ Learning During Search Nilavra Bhattacharya Abstract This R Markdown template is for writing an Oxford University thesis. The template is built using Yihui Xie’s bookdown package, with heavy inspiration from Chester Ismay’s thesisdown and the OxThesis  template (most recently adapted by John McManigle). This template’s sample content include illustrations of how to write a thesis in R Markdown, and largely follows the structure from this R Markdown workshop. Congratulations for taking a step further into the lands of open, reproducible science by writing your thesis using a tool that allows you to transparently include tables and dynamically generated plots directly from the underlying data. Hip hooray! Welcome Welcome to the bs4 output from the oxforddown thesis template for R Markdown. To view/download the PDF output, click here (or click the cover image). Enjoy! Ulrik Lyngs 4 January 2021 Abstract This R Markdown template is for writing an Oxford University thesis. The template is built using Yihui Xie’s bookdown package, with heavy inspiration from Chester Ismay’s thesisdown and the OxThesis  template (most recently adapted by John McManigle). This template’s sample content include illustrations of how to write a thesis in R Markdown, and largely follows the structure from this R Markdown workshop. Congratulations for taking a step further into the lands of open, reproducible science by writing your thesis using a tool that allows you to transparently include tables and dynamically generated plots directly from the underlying data. Hip hooray! Acknowledgments This is where you will normally thank your advisor, colleagues, family and friends, as well as funding and institutional support. In our case, we will give our praises to the people who developed the ideas and tools that allow us to push open science a little step forward by writing plain-text, transparent, and reproducible theses in R Markdown. We must be grateful to John Gruber for inventing the original version of Markdown, to John MacFarlane for creating Pandoc (http://pandoc.org) which converts Markdown to a large number of output formats, and to Yihui Xie for creating knitr which introduced R Markdown as a way of embedding code in Markdown documents, and bookdown which added tools for technical and longer-form writing. Special thanks to Chester Ismay, who created the thesisdown package that helped many a PhD student write their theses in R Markdown. And a very special thanks to John McManigle, whose adaption of Sam Evans’ adaptation of Keith Gillow’s original maths template for writing an Oxford University DPhil thesis in LaTeX provided the template that I in turn adapted for R Markdown. Finally, profuse thanks to JJ Allaire, the founder and CEO of RStudio, and Hadley Wickham, the mastermind of the tidyverse without whom we’d all just given up and done data science in Python instead. Thanks for making data science easier, more accessible, and more fun for us all. "],["introduction.html", "Introduction Why use it? Who should use it?", " Introduction Welcome to oxforddown (Lyngs, 2019), a thesis template for R Markdown that I created when writing my own PhD thesis at the University of Oxford. This template allows you to write in R Markdown, while formatting the PDF output with the beautiful and time-tested OxThesis LaTeX template. The sample content is partly adapted from thesisdown . Hopefully, writing your thesis in R Markdown will provide a nicer interface to the OxThesis template if you haven’t used TeX or LaTeX before. More importantly, R Markdown allows you to embed chunks of code within your thesis and generate plots and tables directly from the underlying data, avoiding copy-paste steps. This gets you into the habit of doing reproducible research, which will benefit you long-term as a researcher, and also help anyone that is trying to reproduce or build upon your results down the road. Why use it? R Markdown creates a simple and straightforward way to interface with the beauty of LaTeX. Packages have been written in R to work directly with LaTeX to produce nicely formatting tables and paragraphs. In addition to creating a user friendly interface to LaTeX, R Markdown allows you to read in your data, analyze it and to visualize it using R, Python or other languages, and provide documentation and commentary on the results of your project. Further, it allows for results of code output to be passed inline to the commentary of your results. You’ll see more on this later, focusing on R. If you are more into Python or something else, you can still use R Markdown - see ‘Other language engines’ in Yihui Xie’s R Markdown: The Definitive Guide. Using LaTeX together with Markdown is more consistent than the output of a word processor, much less prone to corruption or crashing, and the resulting file is smaller than a Word file. While you may never have had problems using Word in the past, your thesis is likely going to be about twice as large and complex as anything you’ve written before, taxing Word’s capabilities. Who should use it? Anyone who needs to use data analysis, math, tables, a lot of figures, complex cross-references, or who just cares about reproducibility in research can benefit from using R Markdown. If you are working in ‘softer’ fields, the user-friendly nature of the Markdown syntax and its ability to keep track of and easily include figures, automatically generate a table of contents, index, references, table of figures, etc. should still make it of great benefit to your thesis project. References Lyngs, U. (2019). Oxforddown: An oxford university thesis template for r markdown. In GitHub repository. https://github.com/ulyngs/oxforddown; GitHub. https://doi.org/10.5281/zenodo.3484682 "],["how-to-use.html", "1 How to use 1.1 How oxforddown is structured 1.2 Building your entire thesis 1.3 Building a single chapter", " 1 How to use 1.1 How oxforddown is structured . +-- index.Rmd +-- _bookdown.yml +-- 00-introduction.Rmd | ... +-- 07-conclusion.Rmd +-- front-and-back-matter | +-- _abstract.Rmd | +-- 98-appendices.Rmd | ... +-- bibliography | +-- references.bib | ... +-- figures | ... +-- docs | +-- _main.pdf | ... +-- scripts_and_filters | +-- knit-functions.R | ... +-- templates | +-- template.tex | ... 1.1.1 index.Rmd: metadata and layout options In index.Rmd, set your thesis’ basic metadata (e.g., title, author name) title: | `oxforddown`: \\ An Oxford University Thesis \\ Template for R Markdown author: Author Name college: Your College Also set filepath(s) to your abstract, acknowledgements, abbreviations, and bibliography (one or more .bib files): abstract: | `r paste(readLines(&quot;front-and-back-matter/_abstract.Rmd&quot;), collapse = &#39;\\n &#39;)` acknowledgements: | `r paste(readLines(&quot;front-and-back-matter/_acknowledgements.Rmd&quot;), collapse = &#39;\\n &#39;)` dedication: For Yihui Xie abbreviations: | `r paste(readLines(&quot;front-and-back-matter/_abbreviations.Rmd&quot;), collapse = &#39;\\n &#39;)` ####################### ## bibliography path ## ####################### bibliography: [bibliography/references.bib, bibliography/additional-references.bib] Finally, index.Rmd is also where you customise layout options. For example, in PDF output what should the heading for the bibliography section say? How should page numbers be positioned? Should line numbers be shown? In HTML output, what CSS files should be used for styling? ### citation and bibliography style ### bibliography-heading-in-pdf: Works Cited ... ### position of page numbers ### ordinary-page-number-foot-or-head: foot #&#39;foot&#39; puts page number in footer, &#39;head&#39; in header ordinary-page-number-position: C ... includeline-num: false #show line numbering in PDF? ... bookdown::bs4_book: css: - templates/bs4_style.css - templates/corrections.css # remove to stop highlighting corrections 1.1.2 other .Rmd files in root folder: thesis chapters each chapter of your thesis should have its own .Rmd file in the root directory when you knit index.Rmd, these chapters are merged together in alphabetical order, based on their filenames 1.1.3 front-and-back-matter/ this folder holds the front and back matter of your thesis it has .Rmd files for your abstract, acknowledgements, abbreviations, and a welcome note that is included in HTML output. Note how these files start with an underscore (e.g. _abstract.Rmd). This means they will not automatically be merged into the thesis – they are explicitly included in index.Rmd 98-appendices and 99-references.Rmd are automatically merged into thesis, however - therefore their file names start with a high number, so that they will be included by the very end (merging is done alphabetically) 99-references.Rmd sole purpose is to set the heading for the references section in HTML and Word output 1.1.4 _bookdown.yml: build options Set output directory for your thesis files (docs/ is the default, as it makes it easy to publish HTML output on GitHub pages) Should R Markdown automatically merge .Rmd files in alphabetical order? Alternatively, specify explicitly which files should be included. 1.1.5 scripts-and-filters knit-function.R has the functions that are used when you build the entire thesis by knitting index.Rmd create_chunk_options.R lets you include cute quotes at the start of a chapter in PDF output colour_and_highlight.lua lets you color text or apply background color to text 1.1.6 templates template.tex is the LaTeX template used to build the entire thesis to PDF in the OxThesis layout (relies on ociamthesis.cls) brief-template.tex is the LaTeX template used to build a single chapter to PDF in the OxThesis layout (relies on ociamthesis.cls) beltcrest.pdf: the oxford logo used on the front page of the PDF output 1.2 Building your entire thesis Build the entire thesis by opening index.Rmd and clicking the ‘knit’ button. The generated thesis files are saved in the docs/ folder To choose output formats, go to the top of index.Rmd’s YAML header and edit the line thesis_formats &lt;- \"pdf\"; to the format(s) you want (options are “pdf”, “bs4”, “gitbook”, and “word”) You can build to multiple formats simultaneously with, e.g., thesis_formats &lt;- c(\"pdf\", \"bs4\", \"word\") If you want to customise the build function, edit scripts_and_filters/knit-functions.R 1.2.0.1 PDF output knit: (function(input, ...) { thesis_formats &lt;- &quot;pdf&quot;; ... When you build the entire thesis to PDF, Latex generates a whole bunch of auxillary files - these are automatically removed after the build process end by the custom knit function that is used when you knit index.Rmd. To change how this removal is done, edit scripts_and_filters/knit-functions.R. The line file.remove(list.files(pattern = \"*\\\\.(log|mtc\\\\d*|maf|aux|bcf|lof|lot|out|toc)$\")) within if (\"pdf\" %in% output_format){ is the one that removes files after PDF output is generated. 1.2.0.2 BS4 book output (HTML) knit: (function(input, ...) { thesis_formats &lt;- &quot;bs4&quot;; ... NOTE: the bs4 book output requires the downlit and bslib R packages (install them with install.packages) Note also that to deploy a BS4 book on GitHub Pages, there must be a .nojekyll file in the docs/ folder, otherwise GitHub does some voodoo that causes some filepaths not to work. This file is generated automatically by oxforddowns knitting function. 1.2.0.3 Gitbook output (HTML) knit: (function(input, ...) { thesis_formats &lt;- &quot;gitbook&quot;; ... Note that to deploy a gitbook on GitHub Pages, there must be a .nojekyll file in the docs/ folder, otherwise GitHub does some voodoo that causes some filepaths not to work. This file is generated automatically by oxforddowns knitting function. 1.2.0.4 Word output knit: (function(input, ...) { thesis_formats &lt;- &quot;word&quot;; ... Note that the Word output has no templates behind it, and many things do not work (e.g. image rotation, highlighting corrections). I encourage pull requests that optimise the Word output, e.g. by using tools from the officer package. 1.3 Building a single chapter To knit an individual chapter without compiling the entire thesis you: open the .Rmd file of a chapter add a YAML header specifying the output format(s) (e.g. bookdown::word_document2 for a word document you might want to upload to Google Docs for feedback from collaborators) click the knit button (the output file is then saved in the root folder) As shown in the sample chapters’ YAML headers, to output a single chapter to PDF, use e.g.: output: bookdown::pdf_document2: template: templates/brief_template.tex citation_package: biblatex documentclass: book bibliography: references.bib The file templates/brief_template.tex formats the chapter in the OxThesis style but without including the front matter (table of contents, abstract, etc). "],["rmd-basics.html", "2 R Markdown basics 2.1 Basic markdown syntax 2.2 Executable code chunks 2.3 Executable inline code 2.4 Executable code in other languages than R", " 2 R Markdown basics Here is a brief introduction to using R Markdown. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents and much, much more. R Markdown provides the flexibility of Markdown with the implementation of R input and output. For more details on using R Markdown see http://rmarkdown.rstudio.com. 2.1 Basic markdown syntax 2.1.1 Whitespace Be careful with your spacing. While whitespace largely is ignored, it does at times give markdown signals as to how to proceed. As a habit, try to keep everything left aligned whenever possible, especially as you type a new paragraph. In other words, there is no need to indent basic text in the Rmd document (in fact, it might cause your text to do funny things if you do). 2.1.2 Italics and bold Italics are done like *this* or _this_ Bold is done like **this** or __this__ Bold and italics is done like ***this***, ___this___, or (the most transparent solution, in my opinion) **_this_** 2.1.3 Inline code Inline code is created with backticks like `this` 2.1.4 Sub and superscript Sub2 and super2 script is created like this~2~ and this^2^ 2.1.5 Strikethrough Strikethrough is done ~~like this~~ 2.1.6 ‘Escaping’ (aka “What if I need an actual asterisk?”) To include an actual *, _ or \\, add another \\ in front of them: \\*, \\_, \\\\ 2.1.7 Endash (–), emdash (—) – and — with -- and --- 2.1.8 Blockquotes Do like this: Put a &gt; in front of the line. 2.1.9 Headings Section headers are created with #’s of increasing number, i.e.  # First-level heading ## Second-level heading ### Etc. In PDF output, a level-five heading will turn into a paragraph heading, i.e. \\paragraph{My level-five heading}, which appears as bold text on the same line as the subsequent paragraph. 2.1.10 Lists Unordered list by starting a line with an * or a -: Item 1 Item 2 Ordered lists by starting a line with a number. Notice that you can mislabel the numbers and Markdown will still make the order right in the output: Item 1 Item 2 To create a sublist, indent the values a bit (at least four spaces or a tab): Item 1 Item 2 Item 3 Item 3a Item 3b 2.1.11 Line breaks The official Markdown way to create line breaks is by ending a line with more than two spaces. Roses are red. Violets are blue. This appears on the same line in the output, because we didn’t add spaces after red. Roses are red. Violets are blue. This appears with a line break because I added spaces after red. I find this is confusing, so I recommend the alternative way: Ending a line with a backslash will also create a linebreak: Roses are red. Violets are blue. To create a new paragraph, you put a blank line. Therefore, this line starts its own paragraph. 2.1.12 Hyperlinks This is a hyperlink created by writing the text you want turned into a clickable link in [square brackets followed by a](https://hyperlink-in-parentheses) 2.1.13 Footnotes Are created1 by writing either ^[my footnote text] for supplying the footnote content inline, or something like [^a-random-footnote-label] and supplying the text elsewhere in the format shown below 2: [^a-random-footnote-label]: This is a random test. 2.1.14 Comments To write comments within your text that won’t actually be included in the output, use the same syntax as for writing comments in HTML. That is, &lt;!-- this will not be included in the output --&gt;. 2.1.15 Math The syntax for writing math is stolen from LaTeX. To write a math expression that will be shown inline, enclose it in dollar signs. - This: $A = \\pi*r^{2}$ Becomes: \\(A = \\pi*r^{2}\\) To write a math expression that will be shown in a block, enclose it in two dollar signs. This: $$A = \\pi*r^{2}$$ Becomes: \\[A = \\pi*r^{2}\\] To create numbered equations, put them in an ‘equation’ environment and give them a label with the syntax (\\#eq:label), like this: \\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} (\\#eq:binom) \\end{equation} Becomes: \\[\\begin{equation} f\\left(k\\right)=\\binom{n}{k}p^k\\left(1-p\\right)^{n-k} \\tag{2.1} \\end{equation}\\] For more (e.g. how to theorems), see e.g. the documentation on bookdown.org 2.2 Executable code chunks The magic of R Markdown is that we can add executable code within our document to make it dynamic. We do this either as code chunks (generally used for loading libraries and data, performing calculations, and adding images, plots, and tables), or inline code (generally used for dynamically reporting results within our text). The syntax of a code chunk is shown in Figure 2.1. Figure 2.1: Code chunk syntax Common chunk options include (see e.g. bookdown.org): echo: whether or not to display code in knitted output eval: whether or to to run the code in the chunk when knitting include: whether to include anything from the from a code chunk in the output document fig.cap: figure caption fig.scap: short figure caption, which will be used in the ‘List of Figures’ in the PDF front matter IMPORTANT: Do not use underscoores in your chunk labels - if you do, you are likely to get an error in PDF output saying something like “! Package caption Error: \\caption outside float”. 2.2.1 Setup chunks - setup, images, plots An R Markdown document usually begins with a chunk that is used to load libraries, and to set default chunk options with knitr::opts_chunk$set. In your thesis, this will probably happen in index.Rmd and/or as opening chunks in each of your chapters. ```{r setup, include=FALSE} # don&#39;t show code unless we explicitly set echo = TRUE knitr::opts_chunk$set(echo = FALSE) library(tidyverse) ``` 2.2.2 Including images Code chunks are also used for including images, with include_graphics from the knitr package, as in Figure 2.2 knitr::include_graphics(&quot;figures/sample-content/beltcrest.png&quot;) Figure 2.2: Oxford logo Useful chunk options for figures include: out.width (use with a percentage) for setting the image size if you’ve got an image that gets waaay to big in your output, it will be constrained to the page width by setting out.width = \"100%\" Figure rotation You can use the chunk option out.extra to rotate images. The syntax is different for LaTeX and HTML, so for ease we might start by assigning the right string to a variable that depends on the format you’re outputting to: if (knitr::is_latex_output()){ rotate180 &lt;- &quot;angle=180&quot; } else { rotate180 &lt;- &quot;style=&#39;transform:rotate(180deg);&#39;&quot; } Then you can reference that variable as the value of out.extra to rotate images, as in Figure 2.3. Figure 2.3: Oxford logo, rotated 2.2.3 Including plots Similarly, code chunks are used for including dynamically generated plots. You use ordinary code in R or other languages - Figure 2.4 shows a plot of the cars dataset of stopping distances for cars at various speeds (this dataset is built in to R). cars %&gt;% ggplot() + aes(x = speed, y = dist) + geom_point() Figure 2.4: A ggplot of car stuff Under the hood, plots are included in your document in the same way as images - when you build the book or knit a chapter, the plot is automatically generated from your code, saved as an image, then included into the output document. 2.2.4 Including tables Tables are usually included with the kable function from the knitr package. Table ?? shows the first rows of that cars data - read in your own data, then use this approach to automatically generate tables. cars %&gt;% head() %&gt;% knitr::kable(caption = &quot;A knitr kable table&quot;) Gotcha: when using kable, captions are set inside the kable function The kable package is often used with the kableExtra package 2.2.5 Control positioning One thing that may be annoying is the way R Markdown handles “floats” like tables and figures. In your PDF output, LaTeX will try to find the best place to put your object based on the text around it and until you’re really, truly done writing you should just leave it where it lies. In general, you should allow LaTeX to do this, but if you really really need a figure to be positioned where you put in the document, then you can make LaTeX attempt to do this with the chunk option fig.pos=\"H\", as in Figure 2.5: knitr::include_graphics(&quot;figures/sample-content/beltcrest.png&quot;) Figure 2.5: An Oxford logo that LaTeX will try to place at this position in the text As anyone who has tried to manually play around with the placement of figures in a Word document knows, this can have lots of side effects with extra spacing on other pages, etc. Therefore, it is not generally a good idea to do this - only do it when you really need to ensure that an image follows directly under text where you refer to it (in this document, I needed to do this for Figure 4.1 in section 4.1.4). For more details, read the relevant section of the R Markdown Cookbook. 2.3 Executable inline code ‘Inline code’ simply means inclusion of code inside text. The syntax for doing this is `r R_CODE` For example, `r 4 + 4` will output 8 in your text. You will usually use this in parts of your thesis where you report results - read in data or results in a code chunk, store things you want to report in a variable, then insert the value of that variable in your text. For example, we might assign the number of rows in the cars dataset to a variable: num_car_observations &lt;- nrow(cars) We might then write: “In the cars dataset, we have `r num_car_observations` observations.” Which would output: “In the cars dataset, we have 50 observations.” 2.4 Executable code in other languages than R If you want to use other languages than R, such as Python, Julia C++, or SQL, see the relevant section of the R Markdown Cookbook my footnote text↩︎ This is a random test.↩︎ "],["cites-and-refs.html", "3 Citations, cross-references, and collaboration 3.1 Citations 3.2 Cross-referencing 3.3 Collaborative writing 3.4 Additional resources", " 3 Citations, cross-references, and collaboration 3.1 Citations The usual way to include citations in an R Markdown document is to put references in a plain text file with the extension .bib, in BibTex format.3 Then reference the path to this file in index.Rmd’s YAML header with bibliography: example.bib. Most reference managers can create a .bib file with you references automatically. However, the by far best reference manager to use with R Markdown is Zotero with the Better BibTex plug-in, because the citr plugin for RStudio (see below) can read references directly from your Zotero library! Here is an example of an entry in a .bib file: @article{Shea2014, author = {Shea, Nicholas and Boldt, Annika}, journal = {Trends in Cognitive Sciences}, pages = {186--193}, title = {{Supra-personal cognitive control}}, volume = {18}, year = {2014}, doi = {10.1016/j.tics.2014.01.006}, } In this entry highlighed section, ‘Shea2014’ is the citation identifier. To default way to cite an entry in your text is with this syntax: [@citation-identifier]. So I might cite some things (Lottridge et al., 2012; Mill, 1965 [1843]; Shea et al., 2014). 3.1.1 Appearance of citations and references section (pandoc) By default, oxforddown lets Pandoc handle how citations are inserted in your text and the references section. You can change the appearance of citations and references by specifying a CSL (Citation Style Language) file in the csl metadata field of index.Rmd. By default, oxforddown by the Americal Psychological Association (7th Edition), which is an author-year format. With this style, a number of variations on the citation syntax are useful to know: Put author names outside the parenthesis This: @Shea2014 says blah. Becomes: Shea et al. (2014) says blah. Include only the citation-year (in parenthesis) This: Shea et al. says blah [-@Shea2014] Becomes: Shea et al. says blah (2014) Add text and page or chapter references to the citation This: [see @Shea2014, pp. 33-35; also @Wu2016, ch. 1] Becomes: Blah blah (see Shea et al., 2014, pp. 33–35; also Wu, 2016, ch. 1). If you want a numerical citation style instead, try csl: bibliography/transactions-on-computer-human-interaction.csl or just have a browse through the Zotero Style Repository and look for one you like. For convenience, you can set the line spacing and the space between the bibliographic entries in the reference section directly from the YAML header in index.Rmd. If you prefer to use biblatex or natbib to handle references, see this chapter. 3.1.2 Insert references easily with RStudio’s Visual Editor For an easy way to insert citations, use RStudio’s Visual Editor. Make sure you have the latest version of RStudio – the visual editor was originally really buggy, especially in relation to references, but as per v2022.02.0, it’s great! 3.2 Cross-referencing We can make cross-references to sections within our document, as well as to figures (images and plots) and tables. The general cross-referencing syntax is \\@ref(label) 3.2.1 Section references Headers are automatically assigned a reference label, which is the text in lower caps separated by dashes. For example, # My header is automatically given the label my-header. So # My header can be referenced with \\@ref(my-section) Remember what we wrote in section 3.1? We can also use hyperlink syntax and add # before the label, though this is only guaranteed to work properly in HTML output: So if we write Remember what we wrote up in [the previous section](#citations)? It becomes Remember what we wrote up in the previous section? 3.2.1.1 Creating custom labels It is a very good idea to create custom labels for our sections. This is because the automatically assigned labels will change when we change the titles of the sections - to avoid this, we can create the labels ourselves and leave them untouched if we change the section titles. We create custom labels by adding {#label} after a header, e.g. # My section {#my-label}. See our chapter title for an example. That was section 3. 3.2.2 Figure (image and plot) references To refer to figures (i.e. images and plots) use the syntax \\@ref(fig:label) GOTCHA: Figures and tables must have captions if you wish to cross-reference them. Let’s add an image: knitr::include_graphics(&quot;figures/sample-content/captain.jpeg&quot;) Figure 3.1: A marvel-lous meme We refer to this image with \\@ref(fig:captain). So Figure 3.1 is this image. And in Figure 2.4 we saw a cars plot. 3.2.3 Table references To refer to tables use the syntax \\@ref(tab:label) Let’s include a table: knitr::kable(cars[1:5,], caption=&quot;Stopping cars&quot;) We refer to this table with \\@ref(tab:cars-table2). So Table ?? is this table. And in Table ?? we saw more or less the same cars table. 3.2.4 Including page numbers Finally, in the PDF output we might also want to include the page number of a reference, so that it’s easy to find in physical printed output. LaTeX has a command for this, which looks like this: \\pageref{fig/tab:label} (note: curly braces, not parentheses) When we output to PDF, we can use raw LaTeX directly in our .Rmd files. So if we wanted to include the page of the cars plot we could write: This: Figure \\@ref(fig:cars-plot) on page \\pageref(fig:cars-plot) Becomes: Figure 2.4 on page 3.2.4.1 Include page numbers only in PDF output A problem here is that LaTeX commands don’t display in HTML output, so in the gitbook output we’d see simply “Figure 2.4 on page”. One way to get around this is to use inline R code to insert the text, and use an ifelse statement to check the output format and then insert the appropriate text. So this: `r ifelse(knitr::is_latex_output(), \"Figure \\\\@ref(fig:cars-plot) on page \\\\pageref{fig:cars-plot}\", \"\")` Inserts this (check this on both PDF and gitbook): Note that we need to escape the backslash with another backslash here to get the correct output. 3.3 Collaborative writing Best practices for collaboration and change tracking when using R Markdown are still an open question. In the blog post One year to dissertate by Lucy D’Agostino, which I highly recommend, the author notes that she knits .Rmd files to a word document, then uses the googledrive R package to send this to Google Drive for comments / revisions from co-authors, then incorporates Google Drive suggestions by hand into the .Rmd source files. This is a bit clunky, and there are ongoing discussions among the R Markdown developers about what the best way is to handle collaborative writing (see issue #1463 on GitHub, where CriticMarkup is among the suggestions). For now, this is an open question in the community of R Markdown users. I often knit to a format that can easily be imported to Google Docs for comments, then go over suggested revisions and manually incorporate them back in to the .Rmd source files. For articles, I sometimes upload a near-final draft to Overleaf, then collaboratively make final edits to the LaTeX file there. I suspect some great solution will be developed in the not-to-distant future, probably by the RStudio team. 3.4 Additional resources R Markdown: The Definitive Guide - https://bookdown.org/yihui/rmarkdown/ R for Data Science - https://r4ds.had.co.nz References Lottridge, D., Marschner, E., Wang, E., Romanovsky, M., &amp; Nass, C. (2012). Browser design impacts multitasking. Proceedings of the Human Factors and Ergonomics Society 56th Annual Meeting. https://doi.org/10.1177/1071181312561289 Mill, J. S. (1965 [1843]). A system of logic, ratiocinative and inductive: Being a connected view of the principles of evidence and the methods of scientific investigation. Longmans. Shea, N., Boldt, A., Bang, D., Yeung, N., Heyes, C., &amp; Frith, C. D. (2014). Supra-personal cognitive control and metacognition. Trends in Cognitive Sciences, 18(4), 186–193. https://doi.org/10.1016/j.tics.2014.01.006 Wu, T. (2016). The Attention Merchants: The Epic Scramble to Get Inside Our Heads. Knopf Publishing Group. The bibliography can be in other formats as well, including EndNote (.enl) and RIS (.ris), see rmarkdown.rstudio.com/authoring_bibliographies_and_citations.↩︎ "],["tables.html", "4 Tables 4.1 Making LaTeX tables play nice", " 4 Tables 4.1 Making LaTeX tables play nice Dealing with tables in LaTeX can be painful. This section explains the main tricks you need to make the pain go away. (Note: if you are looking at the ebook version, you will not see much difference in this section, as it is only relevant for PDF output!) 4.1.1 Making your table pretty When you use kable to create tables, you will almost certainly want to set the option booktabs = TRUE. This makes your table look a million times better: library(knitr) library(tidyverse) head(mtcars) %&gt;% kable(booktabs = TRUE) Compare this to the default style, which looks terrible: head(mtcars) %&gt;% kable() 4.1.2 If your table is too wide You might find that your table expands into the margins of the page, like the tables above. Fix this with the kable_styling function from the kableExtra package: library(kableExtra) head(mtcars) %&gt;% kable(booktabs = TRUE) %&gt;% kable_styling(latex_options = &quot;scale_down&quot;) This scales down the table to fit the page width. 4.1.3 If your table is too long If your table is too long to fit on a single page, set longtable = TRUE in the kable function to split the table across multiple pages. a_long_table &lt;- rbind(mtcars, mtcars) a_long_table %&gt;% select(1:8) %&gt;% kable(booktabs = TRUE, longtable = TRUE) When you do this, you’ll probably want to make the header repeat on new pages. Do this with the kable_styling function from kableExtra: a_long_table %&gt;% kable(booktabs = TRUE, longtable = TRUE) %&gt;% kable_styling(latex_options = &quot;repeat_header&quot;) Unfortunately, we cannot use the scale_down option with a longtable. So if a longtable is too wide, you can either manually adjust the font size, or show the table in landscape layout. To adjust the font size, use kableExtra’s font_size option: a_long_table %&gt;% kable(booktabs = TRUE, longtable = TRUE) %&gt;% kable_styling(font_size = 9, latex_options = &quot;repeat_header&quot;) To put the table in landscape mode, use kableExtra’s landscape function: a_long_table %&gt;% kable(booktabs = TRUE, longtable = TRUE) %&gt;% kable_styling(latex_options = &quot;repeat_header&quot;) %&gt;% landscape() 4.1.4 Max power: manually adjust the raw LaTeX output For total flexibility, you can adjust the raw LaTeX output from kable/kableExtra that generates the table. Let us consider how we would do this for the example of adjusting the font size if our table is too wide: Latex has a bunch of standard commands that set an approximate font size, as shown below in Figure 4.1. Figure 4.1: Font sizes in LaTeX You could use these to manually adjust the font size in your longtable in two steps: Wrap the longtable environment in, e.g., a scriptsize environment, by doing a string replacement in the output from kable/kableExtra Add the attributes that make R Markdown understand that the table is a table (it seems R drops these when we do the string replacement) our_adjusted_table &lt;- a_long_table %&gt;% kable(booktabs = TRUE, longtable = TRUE) %&gt;% kable_styling(latex_options = &quot;repeat_header&quot;) %&gt;% # wrap the longtable in a tiny environment str_replace(&#39;\\\\\\\\begin\\\\{longtable\\\\}&#39;, &#39;\\\\\\\\begin\\\\{scriptsize\\\\}\\n\\\\\\\\begin\\\\{longtable\\\\}&#39;) %&gt;% str_replace(&#39;\\\\\\\\end\\\\{longtable\\\\}&#39;, &#39;\\\\\\\\end\\\\{longtable\\\\}\\n\\\\\\\\end\\\\{scriptsize\\\\}&#39;) #add attributes to make R Markdown treat this as a kable LaTeX table again our_adjusted_table %&gt;% structure(format = &quot;latex&quot;, class = &quot;knitr_kable&quot;) (ref:darwin-quote) — Charles Darwin (Darwin, 1859) References Darwin, C. (1859). On the Origin of Species by Means of Natural Selection or the Preservation of Favoured Races in the Struggle for Life. John Murray. "],["customisations-and-extensions.html", "5 Customisations and extensions 5.1 Chunk caching and the _bookdown_files folder 5.2 Front matter 5.3 Shorten running header (PDF) 5.4 Unnumbered chapters 5.5 Beginning chapters with quotes (PDF) 5.6 Highlighting corrections (HTML &amp; PDF) 5.7 Apply custom font color and highlighting to text (HTML &amp; PDF) 5.8 Adding a second abstract (PDF) 5.9 Including another paper in your thesis - embed a PDF document 5.10 Including another paper in your thesis - R Markdown child document 5.11 Customizing citations and referencing 5.12 Customizing the page headers and footers (PDF) 5.13 Diving in to the OxThesis LaTeX template (PDF) 5.14 Customising to a different university", " 5 Customisations and extensions This chapter describes a number of additional tips and tricks as well as possible customizations to the oxforddown thesis. 5.1 Chunk caching and the _bookdown_files folder If you set cache=TRUE in a code chunk, in order to cache its results if it’s time-consuming to run see the R Markdown documentation, then the files for the caching are stored in the **_bookdown_files** folder. If you don’t use caching and you would like to just have the **_bookdown_files** folder deleted after the build process is complete, then set allow_cache = FALSE in index.Rmd’s call to knit_thesis. That is, your YAML should then look like this: knit: (function(input, ...) { thesis_formats &lt;- &quot;pdf&quot;; source(&quot;scripts_and_filters/knit-functions.R&quot;); knit_thesis(input, thesis_formats, allow_cache = FALSE, ...) }) 5.2 Front matter 5.2.1 Shorten captions shown in the list of figures (PDF) You might want your list of figures (which follows the table of contents) to have shorter (or just different) figure descriptions than the actual figure captions. Do this using the chunk option fig.scap (‘short caption’), for example {r captain-image, fig.cap=\"A very long and descriptive (and potentially boring) caption that doesn't fit in the list of figures, but helps the reader understand what the figure communicates.\", fig.scap=\"A concise description for the list of figures\" 5.2.2 Shorten captions shown in the list of tables (PDF) You might want your list of tables (which follows the list of figures in your thesis front matter) to have shorter (or just different) table descriptions than the actual table captions. If you are using knitr::kable to generate a table, you can do this with the argument caption.short, e.g.: knitr::kable(mtcars, caption = &quot;A very long and descriptive (and potentially boring) caption that doesn&#39;t fit in the list of figures, but helps the reader understand what the figure communicates.&quot;, caption.short = &quot;A concise description for the list of tables&quot;) 5.3 Shorten running header (PDF) You might want a chapter’s running header (i.e. the header showing the title of the current chapter at the top of page) to be shorter (or just different) to the actual chapter title. Do this by adding the latex command \\chaptermark{My shorter version} after your chapter title. For example, chapter 3‘s running header is simply ’Cites and cross-refs’, because it begins like this: # Citations, cross-references, and collaboration {#cites-and-refs} \\chaptermark{Cites and cross-refs} 5.4 Unnumbered chapters To make chapters unnumbered (normally only relevant to the Introduction and/or the Conclusion), follow the chapter header with {-}, e.g. # Introduction {-}. When you do this, you must also follow the heading with these two latex commands: \\adjustmtc \\markboth{The Name of Your Unnumbered Chapter}{} Otherwise the chapter’s mini table of contents and the running header will show the previous chapter. 5.5 Beginning chapters with quotes (PDF) The OxThesis LaTeX template lets you inject some wittiness into your thesis by including a block of type savequote at the beginning of chapters. To do this, use the syntax ```{block type='savequote'}.4 Add the reference for the quote with the chunk option quote_author=\"my author name\". You will also want to add the chunk option include=knitr::is_latex_output() so that quotes are only included in PDF output. It’s not possible to use markdown syntax inside chunk options, so if you want to e.g. italicise a book name in the reference use a ‘text reference’: Create a named piece of text with ‘(ref:label-name) My text’, then point to this in the chunk option with quote_author='(ref:label-name)'. 5.6 Highlighting corrections (HTML &amp; PDF) For when it comes time to do corrections, you may want to highlight changes made when you submit a post-viva, corrected copy to your examiners so they can quickly verify you’ve completed the task. You can do so like this: 5.6.1 Short, inline corrections Highlight short, inline corrections by doing [like this]{.correction} — the text between the square brackets will then be highlighted in blue in the output. Note that pandoc might get confused by citations and cross-references inside inline corrections. In particular, it might get confused by \"[what @Shea2014 said]{.correction}\" which becomes what Shea et al. (2014) said In such cases, you can use LaTeX syntax directly. The correction highlighting uses the soul package, so you can do like this: If using biblatex for references, use \"\\hl{what \\textcite{Shea2014} said} If using natbib for references, use \"\\hl{what \\cite{Shea2014} said} Using raw LaTeX has the drawback of corrections then not showing up in HTML output at all, but you might only care about correction highlighting in the PDF for your examiners anyway! 5.6.2 Blocks of added or changed material Highlight entire blocks of added or changed material by putting them in a block of type correction, using the syntax ```{block type='correction'}.5 Like so: For larger chunks, like this paragraph or indeed entire figures, you can use the correction block type. This environment highlights paragraph-sized and larger blocks with the same blue colour. Note that correction blocks cannot be included in word output. 5.6.3 Stopping corrections from being highlighted To turn off correction highlighting, go to the YAML header of index.Rmd, then: PDF output: set corrections: false HTML output: remove or comment out - templates/corrections.css 5.7 Apply custom font color and highlighting to text (HTML &amp; PDF) The lua filter that adds the functionality to highlight corrections adds two more tricks: you can apply your own choice of colour to highlight text, or change the font color. The syntax is as follows: Here’s [some text in pink highlighting]{highlight=\"pink\"} Becomes: Here’s some text in pink highlighting. [Here's some text with blue font]{color=\"blue\"} Becomes: Here’s some text with blue font Finally — never, ever actually do this – [here's some text with black highlighting and yellow font]{highlight=\"black\" color=\"yellow\"} Becomes: here’s some text with black highlighting and yellow font The file scripts_and_filters/colour_and_highlight.lua implements this, if you want to fiddle around with it. It works with both PDF and HTML output. 5.8 Adding a second abstract (PDF) You may need two abstracts in your thesis, if you e.g. need both an abstract in English and some other language. You can add a second abstract in index.Rmd like so: abstract-second-heading: &quot;Resumé&quot; abstract-second: &quot;This is the second abstract, for example in beautiful French.&quot; 5.9 Including another paper in your thesis - embed a PDF document You may want to embed existing PDF documents into the thesis, for example if your department allows a ‘portfolio’ style thesis and you need to include an existing typeset publication as a chapter. In gitbook output, you can simply use knitr::include_graphics and it should include a scrollable (and downloadable) PDF. You will probably want to set the chunk options out.width='100%' and out.height='1000px': knitr::include_graphics(&quot;figures/sample-content/pdf_embed_example/Lyngs2020_FB.pdf&quot;) In LaTeX output, however, this approach can cause odd behaviour. Therefore, when you build your thesis to PDF, split the PDF into an alphanumerically sorted sequence of single-page PDF files (you can do this automatically with the package pdftools). You can then use the appropriate LaTeX command to insert them, as shown below (for brevity, in the oxforddown PDF sample content we’re only including two pages). Note that the chunk option results='asis' must be set. You may also want to remove margins from the PDF files, which you can do with Adobe Acrobat (paid version) and likely other software. # install.packages(pdftools) # split PDF into pages stored in figures/sample-content/pdf_embed_example/split/ # pdftools::pdf_split(&quot;figures/sample-content/pdf_embed_example/Lyngs2020_FB.pdf&quot;, # output = &quot;figures/sample-content/pdf_embed_example/split/&quot;) # grab the pages pages &lt;- list.files(&quot;figures/sample-content/pdf_embed_example/split&quot;, full.names = TRUE) # set how wide you want the inserted PDFs to be: # 1.0 is 100 per cent of the oxforddown PDF page width; # you may want to make it a bit bigger pdf_width &lt;- 1.2 # for each PDF page, insert it nicely and # end with a page break cat(stringr::str_c(&quot;\\\\newpage \\\\begin{center} \\\\makebox[\\\\linewidth][c]{\\\\includegraphics[width=&quot;, pdf_width, &quot;\\\\linewidth]{&quot;, pages, &quot;}} \\\\end{center}&quot;)) 5.10 Including another paper in your thesis - R Markdown child document Sometimes you want to include another paper you are currently writing as a chapter in your thesis. Above 5.9, we described the simplest way to do this: include the other paper as a pdf. However, in some cases you instead want to include the R Markdown source from this paper, and have it compiled within your thesis. This is a little bit more tricky, because you need to keep careful track of your file paths, but it is possible by including the paper as a child document. There are four main steps: Include the paper as a child document Make file paths compatible with knitting the article on its own, as well as when it’s include in your thesis Make header levels correct Make figure widths correct 5.10.1 An example paper in another folder Take this simple example (files for this are in this GitHub repository): |--paper_to_include | |--my_paper.Rmd | |--data | | |--cat_salt.csv | |--figures | | |--cat.jpg | |--thesis As the chart suggests, you have another folder, paper_to_include/ living in the same containing folder as your thesis folder. In the paper_to_include folder, the file my_paper.Rmd is where you write the paper. In my_paper.Rmd, you read in a CSV file found in the subfolder data/cats.csv, and also an image from the subfolder figures/cat.jpg. 5.10.2 Step 1: Include paper as a child document In your thesis folder, create an Rmd file for the chapter where you want to include another paper. Add one or more code chunks that include R Markdown files from that paper as child documents: # Including an external chapter ```{r child = &quot;../paper_to_include/my_paper.Rmd&quot;} ``` 5.10.3 Step 2: Make file paths compatible Use parameters to adjust the file path of images based on values you set in the YAML header of an R Markdown file. In my_paper.Rmd, create a parameter called other_path and set it to an empty string: --- title: &quot;A fabulous article in a different folder&quot; params: other_path: &quot;&quot; --- In my_paper.Rmd, put this at the start of the filepath when you read in data or include images: library(tidyverse) library(knitr) cat_data &lt;- read_csv(str_c(params$other_path, &quot;data/cats.csv&quot;)) include_graphics(str_c(params$other_path, &quot;figures/cat.jpg&quot;)) Finally, in your thesis folder’s index.Rmd file, also create the parameter other_path. But here, set it to where the paper_to_include/ folder is relative to your thesis folder: params: other_path: &quot;../paper_to_include/&quot; 5.10.3.1 Note on HTML output Note that if you want to host an HTML version on your thesis online, you will need to include graphics in the content that you host online - the internet obviously won’t be able to see filepaths that are just referring to stuff in another folder on your computer! 5.10.4 Step 3: Make sure header levels are correct Unless the paper you want to include is also written as a book, your header levels are probably going to be off. That is, the level 1 headers (# Some header) you use for main sections in the other paper turns into chaper titles when included in your thesis. To avoid this, first increment all heading levels by one in paper_to_include/my_paper.Rmd (# Some header -&gt; ## Some header). Then in paper_to_include/ create a lua filter that decrements header levels by one: Create a text file, save it as reduce_header_level.lua, and give it the content below. function Header(el) if (el.level &lt;= 1) then error(&quot;I don&#39;t know how to decrease the level of h1&quot;) end el.level = el.level - 1 return el end In the YAML header of paper_to_include/my_paper.Rmd, use this filter: --- title: &quot;A fabulous article in a different folder&quot; params: other_path: &quot;&quot; output: pdf_document: pandoc_args: [&quot;--lua-filter=reduce_header_level.lua&quot;] --- Now, your header levels will be correct both when you knit the paper on its own and when its included in your thesis. NOTE: There might be no need to use a lua filter to shift heading - it seems you could simply use pandoc_args: [\"--shift-heading-level-by=-1\"] (see https://pandoc.org/MANUAL.html#reader-options) 5.10.5 Step 4. Make sure figure widths are correct It might be that your figure widths when knitting your paper on its own, and when including it in your thesis, need to be different. You can again use parameters to set figure widths. Imagine you want figure width to be 80% of the page width when knitting your paper on its own, but 100% in your thesis. In paper_to_include/my_paper.Rmd, first add a parameter we could call out_width and set it to the string “80%”: --- title: &quot;A fabulous article in a different folder&quot; params: other_path: &quot;&quot; out_width: &quot;80%&quot; output: pdf_document: pandoc_args: [&quot;--lua-filter=reduce_header_level.lua&quot;] --- Then, make sure use that parameter to set the output width when you include figures in paper_to_include/my_paper.Rmd: ```{r, out.width=params$out_width, fig.cap=&quot;A very funny cat&quot;} include_graphics(str_c(params$other_path, &quot;figures/cat.jpg&quot;)) ``` Finally, create the parameter out_width in your thesis’ index.Rmd file: params: other_path: &quot;../paper_to_include/&quot; out_width: &quot;80%&quot; Now, the output width of your figure will be 80% when knitting your paper on its own, and 100% when knitting it as child document of your thesis. 5.11 Customizing citations and referencing 5.11.1 Using a .csl file with pandoc See section 3.1.1. The only drawbacks to letting pandoc handle citations is that (i) it does not support chapter bibliographies, (ii) if you’re a LaTeX veteran, you might be more comfortable with biblatex or natbib. 5.11.2 Using biblatex To use biblatex to handle citations, first uncomment this in index.Rmd, YAML header: use-biblatex: true bib-latex-options: &quot;style=authoryear, sorting=nyt, backend=biber, maxcitenames=2, useprefix, doi=true, isbn=false, uniquename=false&quot; Then tell R Markdown to use biblatex when inserting citations, by setting citation_package: biblatex: output: bookdown::pdf_book: citation_package: biblatex To customise the appearance of citations, change bib-latex-options. For example, to get numerical citations, with references in order of their appearance in the text, set it to bib-latex-options: &quot;style=numeric-comp, sorting=none, backend=biber, maxcitenames=2, useprefix, doi=true, isbn=false, uniquename=false&quot; 5.11.2.1 Adding chapter bibliographies If you would like chapter bibliographies, first add “refsection=chapter” to the biblatex options, for example like this: bib-latex-options: &quot;refsection=chapter, style=authoryear, sorting=nyt, backend=biber, maxcitenames=2, useprefix, doi=true, isbn=false, uniquename=false&quot; Second, set the parameter insertHeadingInPDF: false in index.Rmd, to suppress the inclusion of a ‘References’ heading at the end of the thesis. params: insertHeadingInPDF: false Finally insert this line at the end of each chapter, to print the bibliographies there: \\printbibliography[segment=\\therefsection,heading=subbibliography] 5.11.3 Using natbib To use natbib to handle citations, first uncomment this in index.Rmd, YAML header: use-natbib: true natbib-citation-style: authoryear #for science, you might want numbers,square natbib-bibliography-style: templates/ACM-Reference-Format.bst #e.g. &quot;plainnat&quot;, unsrtnat, or path to a .bst file Then tell R Markdown to use natbib when inserting citations, by setting citation_package: natbib: output: bookdown::pdf_book: citation_package: natbib To customise the appearance of citations, change what .bst file you point to in natbib-bibliography-style. 5.12 Customizing the page headers and footers (PDF) This can now be done directly in index.Rmd’s YAML header. If you are a LaTeX expert and need further customisation that what’s currently provided, you can tweak the relevant sections of templates/template.tex - the relevant code is beneath the line that begins \\usepackage{fancyhdr}. 5.13 Diving in to the OxThesis LaTeX template (PDF) For LaTeX minded people, you can read through templates/template.tex to see which additional customisation options are available as well as templates/ociamthesis.cls which supplies the base class. For example, template.tex provides an option for master’s degree submissions, which changes identifying information to candidate number and includes a word count. At the time of writing, you must set this directly in template.tex rather than from the YAML header in index.Rmd. 5.14 Customising to a different university 5.14.1 The minimal route If the front matter in the OxThesis LaTeX template is suitable to your university, customising oxforddown to your needs could be as simple as putting the name of your institution and the path to your university’s logo in index.Rmd: university: University of You university-logo: figures/your-logo-here.pdf 5.14.2 Replacing the entire title page with your required content If you have a .tex file with some required front matter from your university that you want to replace the OxThesis template’s title page altogether, you can provide a filepath to this file in index.Rmd. oxforddown’s sample content includes and example of this — if you use the YAML below, your front matter will look like this: alternative-title-page: front-and-back-matter/alt-title-page-example.tex References Shea, N., Boldt, A., Bang, D., Yeung, N., Heyes, C., &amp; Frith, C. D. (2014). Supra-personal cognitive control and metacognition. Trends in Cognitive Sciences, 18(4), 186–193. https://doi.org/10.1016/j.tics.2014.01.006 For more on custom block types, see the relevant section in Authoring Books with R Markdown.↩︎ In the .tex file for PDF output, this will put the content between \\begin{correction} and \\end{correction}; in gitbook output it will be put between &lt;div class=\"correction\"&gt; and &lt;/div&gt;.↩︎ "],["conclusion.html", "Conclusion More info", " Conclusion If we don’t want Conclusion to have a chapter number next to it, we can add the {-} attribute. More info And here’s some other random info: the first paragraph after a chapter title or section head shouldn’t be indented, because indents are to tell the reader that you’re starting a new paragraph. Since that’s obvious after a chapter or section title, proper typesetting doesn’t add an indent there. This paragraph, by contrast, will be indented as it should because it is not the first one after the ‘More info’ heading. All hail LaTeX. (If you’re reading the HTML version, you won’t see any indentation - have a look at the PDF version to understand what in the earth this section is babbling on about). "],["the-first-appendix.html", "A The First Appendix", " A The First Appendix This first appendix includes an R chunk that was hidden in the document (using echo = FALSE) to help with readibility: In 02-rmd-basics-code.Rmd library(tidyverse) knitr::include_graphics(&quot;figures/sample-content/chunk-parts.png&quot;) And here’s another one from the same chapter, i.e. Chapter 2.2: knitr::include_graphics(&quot;figures/sample-content/beltcrest.png&quot;) "],["the-second-appendix-for-fun.html", "B The Second Appendix, for Fun", " B The Second Appendix, for Fun "],["references.html", "References", " References Darwin, C. (1859). On the Origin of Species by Means of Natural Selection or the Preservation of Favoured Races in the Struggle for Life. John Murray. Goethe, J. W. von. (1829). Wilhelm Meisters Wanderjahre oder die Entsagenden. Cotta. Lottridge, D., Marschner, E., Wang, E., Romanovsky, M., &amp; Nass, C. (2012). Browser design impacts multitasking. Proceedings of the Human Factors and Ergonomics Society 56th Annual Meeting. https://doi.org/10.1177/1071181312561289 Lyngs, U. (2019). Oxforddown: An oxford university thesis template for r markdown. In GitHub repository. https://github.com/ulyngs/oxforddown; GitHub. https://doi.org/10.5281/zenodo.3484682 Mill, J. S. (1965 [1843]). A system of logic, ratiocinative and inductive: Being a connected view of the principles of evidence and the methods of scientific investigation. Longmans. Shea, N., Boldt, A., Bang, D., Yeung, N., Heyes, C., &amp; Frith, C. D. (2014). Supra-personal cognitive control and metacognition. Trends in Cognitive Sciences, 18(4), 186–193. https://doi.org/10.1016/j.tics.2014.01.006 Wu, T. (2016). The Attention Merchants: The Epic Scramble to Get Inside Our Heads. Knopf Publishing Group. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
